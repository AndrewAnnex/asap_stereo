#!/usr/bin/env bash
set -x
# Summary:
# This script runs pc_align using a CSV of MOLA shots as a reference and then creates DEMs at 24 m/px and orthoimages at 24 m/px and 6 m/px

# Input: text file containing list of the root directories for each stereopair
# Output will be sent to <stereopair root dir>/results/dem_align


# Dependencies:
#      NASA Ames Stereo Pipeline
#      USGS ISIS3
#      GDAL


# Just a simple function to print a usage message
print_usage (){
    echo ""
    echo "Usage: asp_ctx_map_ba_pc_align2dem.sh -d <stereodirs.lis> -m <max-displacement> -s <mpp>"
    echo " Where <stereodirs.lis> is a file containing the name of the subdirectories to loop over, 1 per line"
    echo " <max-displacement> is the maximum displacement to pass to pc_align (type pc_align --help for details)"
    echo " <mpp> is the target resoultion in mpp for the final DEM product, for ctx either 24 or 18 generally"
    echo "  Subdirectories containing stereopairs must all exist within the same root directory"
    echo "  Furthermore, the names listed in <stereodirs.lis> will be used as the file prefix for output generated by this script"
}

### Check for sane commandline arguments

if [[ $# = 0 ]] || [[ "$1" != "-"* ]]; then
    # print usage message and exit
    print_usage
    exit 0
elif  [[ "$1" = "-"* ]]; then # Else use getopts to parse flags that may have been set
    while getopts ":d:m:s:" opt; do
        case $opt in
          d)
              if [ ! -e "$OPTARG" ]; then
                  echo "ERROR: File $OPTARG not found" #>&2
                  # print usage message and exit
                  print_usage
                  exit 1
              fi
              dirs=$OPTARG
              ;;
          m)
              # Test that the argument accompanying the m option is a positive integer
              if ! test "$OPTARG" -gt 0 2> /dev/null ; then
                  echo "ERROR: $OPTARG not a valid argument" #>&2
                  echo "The maximum displacement must be a positive integer" #>&2
                  # print usage message and exit
                  print_usage
                  exit 1
              else
                  maxd=$OPTARG
              fi
              ;;
          s)
              demgsd=$OPTARG
              dempostfix=$(echo ${demgsd} | sed 's/\.//')
              ;;
          \?)
              # Error to stop the script if an invalid option is passed
              echo "Invalid option: -$OPTARG" #>&2
              # print usage message and exit
              print_usage
              exit 1
              ;;
          :)
              # Error to prevent script from continuing if flag is not followed by at least 1 argument
              echo "ERROR: Option -$OPTARG requires an argument." #>&2
              # print usage message and exit
              print_usage
              exit 1
              ;;
        esac
    done
fi

# If we've made it this far, commandline args look sane and specified file exists

#######################################################
# figure out the number of cores/threads the pc has
# we assume we have hyperthreading so the cores should
# just be half the thread count
export num_threads_asp=`getconf _NPROCESSORS_ONLN`
export num_cores_asp=$((num_threads_asp / 2 ))
export num_procs_asp=$((num_cores_asp / 4 ))
#######################################################

## Release the Kracken!

echo "Start asp_ctx_map_ba_pc_align2dem $(date)"
# loop through the directories listed in "stereodirs.lis" and run through point2dem process
for i in $( cat ${dirs} ); do
    echo Working on $i
    cd $i || exit 1
    # extract the proj4 string from one of the image cubes using asap and store it in a variable (we'll need it later for point2dem)
    proj=$(awk '{print("asap get-srs-info "$1".lev1eo.cub")}' stereopair.lis | sh | sed 's/'\''//g') || exit 1

    # Move down into the results directory for stereopair $i
    cd ./results_map_ba || exit 1
    # run pc_align and send the output to a new subdirectory called dem_align
    echo "Running pc_align..."
    pc_align --num-iterations 2000 --threads ${num_threads_asp} --max-displacement $maxd --highest-accuracy ${i}_map_ba-PC.tif ../${i}_pedr4align.csv --datum D_MARS --save-inv-trans -o dem_align/${i}_map_ba_align
    if [ $? -ne 0 ]
    then
        echo "Failure running pc_align of CTX $i to $refdem at $(date)"
        exit 1
    else
        echo "Success running pc_align of CTX $i to $refdem at $(date)"
    fi

    # move down into the directory with the pc_align output, which should be called "dem_align"
    cd ./dem_align || exit 1
    mkdir -p logs

    # Create  DEM, ortho, normalized DEM, errorimage, no hole filling
    point2dem --threads ${num_threads_asp} --t_srs "${proj}" -r mars --nodata -32767 -s ${demgsd} ${i}_map_ba_align-trans_reference.tif --orthoimage -n --errorimage ../${i}_map_ba-L.tif -o ${i}_map_ba_align_${dempostfix}
    if [ $? -ne 0 ]
    then
        echo "Failure running point2dem at ${demgsd}m/p for $i at $(date)"
        exit 1
    else
        echo "Success running point2dem at ${demgsd}m/p for $i at $(date)"
    fi
    mv *-log-* ./logs

    # Run dem_geoid on the align'd DEM so that the elevation values are comparable to MOLA products
    dem_geoid --threads ${num_threads_asp} ${i}_map_ba_align_${dempostfix}-DEM.tif -o ${i}_map_ba_align_${dempostfix}-DEM
    if [ $? -ne 0 ]
    then
        echo "Failure running dem_geoid for $i at $(date)"
        exit 1
    else
        echo "Success running dem_geoid for $i at $(date)"
    fi

    mv *-log-* ./logs
    # Create hillshade for the DEM
    echo "Generating hillshade with gdaldem"
    gdaldem hillshade ${i}_map_ba_align_${dempostfix}-DEM.tif ${i}_map_ba_align_${dempostfix}-hillshade.tif
    if [ $? -ne 0 ]
    then
        echo "Failure running gdaldem hillshade for $i at $(date)"
        exit 1
    else
        echo "Success running gdaldem hillshade for $i at $(date)"
    fi

    mv *-log-* ./logs
    # Create 6 m/px ortho, no hole-filling, no DEM
    point2dem --threads ${num_threads_asp} --t_srs "${proj}" -r mars --nodata -32767 -s 6 ${i}_map_ba_align-trans_reference.tif --orthoimage ../${i}_map_ba-L.tif -o ${i}_map_ba_align_6 --no-dem
    if [ $? -ne 0 ]
    then
        echo "Failure running point2dem at 6m/p for $i at $(date)"
        exit 1
    else
        echo "Success running point2dem at 6m/p for $i at $(date)"
    fi
    echo "Done with ${i}_ba"

    mv *-log-* ./logs

    # Move back up to the root of the stereo project
    cd ../../../ || exit 1
done
echo "End   asp_ctx_map_ba_pc_align2dem $(date)"
set +x
